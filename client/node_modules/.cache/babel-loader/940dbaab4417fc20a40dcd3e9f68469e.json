{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/twitter-rebuild/src/components/InteractionIcon/InteractionIcon.jsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Repeat, Heart, MessageCircle } from 'react-feather';\nexport const getIconData = type => {\n  switch (type) {\n    case 'like':\n      return {\n        Icon: /*#__PURE__*/_jsxDEV(Heart, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 15\n        }, this),\n        color: 'var(--c-light-like-red)',\n        mutedColor: 'var(--c-light-like-red-muted)'\n      };\n\n    case 'retweet':\n      return {\n        Icon: /*#__PURE__*/_jsxDEV(Repeat, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 15\n        }, this),\n        color: 'var(--c-light-retweet-green)',\n        mutedColor: 'var(--c-light-retweet-green-muted)'\n      };\n\n    case 'reply':\n      return {\n        Icon: /*#__PURE__*/_jsxDEV(MessageCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 15\n        }, this),\n        color: 'var(--c-light-reply-blue)',\n        mutedColor: 'var(--c-light-reply-blue-muted)'\n      };\n\n    default:\n      return null;\n  }\n}; // const IconElement = ({ type, noColor, ...props }) => {\n//   const { Icon, ...colorData } = getIconData(type);\n//   const colorStyle = noColor ? {} : colorData;\n//   return <Icon {...colorStyle} {...props} />;\n// };\n// const StyledIcon = styled(IconElement)`\n//   color: ${props => props.color};\n//   background-color: ${props => props.backgroundColor};\n//   &:hover {\n//     color: var(--c-light-like-red);\n//   }\n// `;\n\nconst IconElement = ({\n  Icon,\n  props\n}) => /*#__PURE__*/_jsxDEV(Icon, { ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 42\n}, this);\n\n_c = IconElement;\nconst StyledIcon = styled(IconElement)`\n  color: ${props => props.color};\n  background-color: ${props => props.mutedColor};\n\n  &:hover {\n    color: var(--c-light-like-red);\n  }\n`;\nexport default StyledIcon;\n/**\n * Alts\n * - plain, no style, no hover\n * - plain, no style, hover color,     hover circle\n * - bold,  color,    no hover (same), hover circle\n */\n// const iconData = {\n//   like: {\n//     Icon: <Heart />,\n//     color: 'var(--c-light-like-red)',\n//     backgroundColor: 'var(--c-light-like-red-muted)',\n//   },\n//   retweet: {\n//     Icon: <Repeat />,\n//     color: 'var(--c-light-retweet-green)',\n//     backgroundColor: 'var(--c-light-retweet-green-muted)',\n//   },\n//   reply: {\n//     Icon: <MessageCircle />,\n//     color: 'var(--c-light-reply-blue)',\n//     backgroundColor: 'var(--c-light-reply-blue-muted)',\n//   },\n//   default: {\n//     Icon: null,\n//     color: 'var(--c-light-reply-blue)',\n//     backgroundColor: 'var(--c-light-reply-blue-muted)',\n//   },\n// };\n// const InteractionIcon = ({ type, noStyle, ...props }) => {\n//   // const { Icon, color, backgroundColor } = iconData[type] || iconData.default;\n//   const { Icon, ...colorStyle } = getIconData(type);\n//   if (noStyle) return <Icon />;\n//   return <Icon {...colorStyle} />;\n// };\n// const InteractionIcon = ({ type, ...props }) => {\n//   switch (type) {\n//     case 'like':\n//       return noStyle ? <Heart {...props} /> : <StyledHeart {...props} />;\n//     case 'retweet':\n//       return noStyle ? <Repeat {...props} /> : <StyledRepeat {...props} />;\n//     case 'reply':\n//       return noStyle ? <MessageCircle {...props} /> : <StyledMessageCircle {...props} />;\n//     default:\n//       return null;\n//   }\n// };\n// export default InteractionIcon;\n\nvar _c;\n\n$RefreshReg$(_c, \"IconElement\");","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/twitter-rebuild/src/components/InteractionIcon/InteractionIcon.jsx"],"names":["React","styled","Repeat","Heart","MessageCircle","getIconData","type","Icon","color","mutedColor","IconElement","props","StyledIcon"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,aAAxB,QAA6C,eAA7C;AAEA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACnC,UAAQA,IAAR;AACE,SAAK,MAAL;AACE,aAAO;AACLC,QAAAA,IAAI,eAAE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBADD;AAELC,QAAAA,KAAK,EAAE,yBAFF;AAGLC,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF,SAAK,SAAL;AACE,aAAO;AACLF,QAAAA,IAAI,eAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADD;AAELC,QAAAA,KAAK,EAAE,8BAFF;AAGLC,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO;AACLF,QAAAA,IAAI,eAAE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBADD;AAELC,QAAAA,KAAK,EAAE,2BAFF;AAGLC,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF;AACE,aAAO,IAAP;AApBJ;AAsBD,CAvBM,C,CAyBP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEH,EAAAA,IAAF;AAAQI,EAAAA;AAAR,CAAD,kBAAqB,QAAC,IAAD,OAAUA;AAAV;AAAA;AAAA;AAAA;AAAA,QAAzC;;KAAMD,W;AAEN,MAAME,UAAU,GAAGX,MAAM,CAACS,WAAD,CAAc;AACvC,WAAWC,KAAK,IAAIA,KAAK,CAACH,KAAM;AAChC,sBAAsBG,KAAK,IAAIA,KAAK,CAACF,UAAW;AAChD;AACA;AACA;AACA;AACA,CAPA;AASA,eAAeG,UAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Repeat, Heart, MessageCircle } from 'react-feather';\n\nexport const getIconData = (type) => {\n  switch (type) {\n    case 'like':\n      return {\n        Icon: <Heart />,\n        color: 'var(--c-light-like-red)',\n        mutedColor: 'var(--c-light-like-red-muted)',\n      };\n    case 'retweet':\n      return {\n        Icon: <Repeat />,\n        color: 'var(--c-light-retweet-green)',\n        mutedColor: 'var(--c-light-retweet-green-muted)',\n      };\n    case 'reply':\n      return {\n        Icon: <MessageCircle />,\n        color: 'var(--c-light-reply-blue)',\n        mutedColor: 'var(--c-light-reply-blue-muted)',\n      };\n    default:\n      return null;\n  }\n};\n\n// const IconElement = ({ type, noColor, ...props }) => {\n//   const { Icon, ...colorData } = getIconData(type);\n//   const colorStyle = noColor ? {} : colorData;\n//   return <Icon {...colorStyle} {...props} />;\n// };\n\n// const StyledIcon = styled(IconElement)`\n//   color: ${props => props.color};\n//   background-color: ${props => props.backgroundColor};\n\n//   &:hover {\n//     color: var(--c-light-like-red);\n//   }\n// `;\n\nconst IconElement = ({ Icon, props }) => <Icon {...props} />;\n\nconst StyledIcon = styled(IconElement)`\n  color: ${props => props.color};\n  background-color: ${props => props.mutedColor};\n\n  &:hover {\n    color: var(--c-light-like-red);\n  }\n`;\n\nexport default StyledIcon;\n\n/**\n * Alts\n * - plain, no style, no hover\n * - plain, no style, hover color,     hover circle\n * - bold,  color,    no hover (same), hover circle\n */\n\n// const iconData = {\n//   like: {\n//     Icon: <Heart />,\n//     color: 'var(--c-light-like-red)',\n//     backgroundColor: 'var(--c-light-like-red-muted)',\n//   },\n//   retweet: {\n//     Icon: <Repeat />,\n//     color: 'var(--c-light-retweet-green)',\n//     backgroundColor: 'var(--c-light-retweet-green-muted)',\n//   },\n//   reply: {\n//     Icon: <MessageCircle />,\n//     color: 'var(--c-light-reply-blue)',\n//     backgroundColor: 'var(--c-light-reply-blue-muted)',\n//   },\n//   default: {\n//     Icon: null,\n//     color: 'var(--c-light-reply-blue)',\n//     backgroundColor: 'var(--c-light-reply-blue-muted)',\n//   },\n// };\n\n// const InteractionIcon = ({ type, noStyle, ...props }) => {\n//   // const { Icon, color, backgroundColor } = iconData[type] || iconData.default;\n\n//   const { Icon, ...colorStyle } = getIconData(type);\n//   if (noStyle) return <Icon />;\n//   return <Icon {...colorStyle} />;\n// };\n\n// const InteractionIcon = ({ type, ...props }) => {\n//   switch (type) {\n//     case 'like':\n//       return noStyle ? <Heart {...props} /> : <StyledHeart {...props} />;\n//     case 'retweet':\n//       return noStyle ? <Repeat {...props} /> : <StyledRepeat {...props} />;\n//     case 'reply':\n//       return noStyle ? <MessageCircle {...props} /> : <StyledMessageCircle {...props} />;\n//     default:\n//       return null;\n//   }\n// };\n\n// export default InteractionIcon;\n"]},"metadata":{},"sourceType":"module"}