{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n  _s();\n\n  const [theme, setTheme] = useState('light');\n  const [isComponentMounted, setIsComponentMounted] = useState(false);\n\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light');\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme && setTheme(localTheme);\n    setIsComponentMounted(true);\n  }, []);\n  return [theme, themeToggler, isComponentMounted];\n};\n\n_s(useDarkMode, \"PyPa5dhaeYIu52SbRNsz9v2/qBs=\");","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/twitter-rebuild/client/src/hooks/UseDarkMode/useDarkMode.tsx"],"names":["useEffect","useState","useDarkMode","theme","setTheme","isComponentMounted","setIsComponentMounted","setMode","mode","window","localStorage","setItem","themeToggler","localTheme","getItem"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAAC,KAAD,CAA5D;;AAEA,QAAMM,OAAO,GAAIC,IAAD,IAAkB;AAChCC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,IAArC;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACD,GAHD;;AAKA,QAAMI,YAAY,GAAG,MAAM;AACzBT,IAAAA,KAAK,KAAK,OAAV,GAAoBI,OAAO,CAAC,MAAD,CAA3B,GAAsCA,OAAO,CAAC,OAAD,CAA7C;AACD,GAFD;;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAGJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,CAAnB;AACAD,IAAAA,UAAU,IAAIT,QAAQ,CAACS,UAAD,CAAtB;AACAP,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAACH,KAAD,EAAQS,YAAR,EAAsBP,kBAAtB,CAAP;AACD,CApBM;;GAAMH,W","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState('light');\n  const [isComponentMounted, setIsComponentMounted] = useState(false)\n\n  const setMode = (mode: string) => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light');\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme && setTheme(localTheme);\n    setIsComponentMounted(true);\n  }, []);\n  \n  return [theme, themeToggler, isComponentMounted];\n};\n"]},"metadata":{},"sourceType":"module"}